server:
  port: 8080

spring:
  application:
    name: archive
  
  datasource:
    # PostgreSQL 서비스로 연결 (같은 namespace)
    url: jdbc:postgresql://postgresql-service:5432/${POSTGRES_DB:archive-db}
    username: ${POSTGRES_USER:archive-user}
    password: ${POSTGRES_PASSWORD:archive-password}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false  # 프로덕션에서는 false로 설정
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false  # 프로덕션에서는 false로 설정
  
  data:
    redis:
      host: redis-service
      port: 6379

jwt:
  common:
    key: YXJjaGl2ZV9qd3Rfc2VjcmV0X2tleV90aGlzX2lzX2FfbG9uZ19zZWNyZXRfa2V5X2Zvcl9qd3RfdG9rZW5fZ2VuZXJhdGlvbl9hbmRfdmFsaWRhdGlvbg==

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html

slack:
  bot:
    token: ${SLACK_BOT_TOKEN}
    channel: "${SLACK_CHANNEL}"

ncp:
  object-storage:
    endpoint: https://kr.object.ncloudstorage.com
    region: kr-standard
    access-key: ${NCP_ACCESS_KEY}
    secret-key: ${NCP_SECRET_KEY}
    bucket-name: ${NCP_BUCKET_NAME}

logging:
  level:
    org.springframework: INFO  # k8s에서는 INFO 레벨로 설정 (성능 고려)
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.springframework.web.servlet: WARN
    org.springframework.web.multipart: WARN
    org.springframework.web.bind: WARN
    com.alpha.archive: DEBUG  # 애플리케이션 로그는 DEBUG 유지
    root: INFO
