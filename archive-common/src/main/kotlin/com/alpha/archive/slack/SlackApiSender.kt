package com.alpha.archive.slack

import com.alpha.archive.slack.dto.ErrorInfo
import com.slack.api.methods.MethodsClient
import com.slack.api.methods.request.chat.ChatPostMessageRequest
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.core.task.TaskExecutor
import org.springframework.stereotype.Component
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

/**
 * Slack Bot Token APIÎ•º ÏÇ¨Ïö©Ìïú Î≥¥Ïïà ÏóêÎü¨ ÏïåÎ¶º Ï†ÑÏÜ°Ïûê
 * WebhookÎ≥¥Îã§ Îçî ÏïàÏ†ÑÌïú Bot TokenÎßå ÏÇ¨Ïö©
 */
@Component
class SlackApiSender(
    private val slackMethodsClient: MethodsClient,
    private val slackBotToken: String,
    private val slackChannel: String,
    @Qualifier("slackTaskExecutor") private val taskExecutor: TaskExecutor,
) {

    companion object {
        private val logger = LoggerFactory.getLogger(SlackApiSender::class.java)
    }

    fun sendErrorNotification(errorInfo: ErrorInfo) {
        taskExecutor.execute {
            sendViaBotApi(errorInfo)
        }
    }

    /**
     * Bot Token APIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Î©îÏãúÏßÄ Ï†ÑÏÜ° (Î≥¥Ïïà Í∞ïÌôî)
     */
    private fun sendViaBotApi(errorInfo: ErrorInfo) {
        try {
            val message = createErrorMessage(errorInfo)
            
            val request = ChatPostMessageRequest.builder()
                .channel(slackChannel)
                .text(message)
                .build()
            
            val response = slackMethodsClient.chatPostMessage(request)
            
            if (response.isOk) {
                logger.info("üí¨ Slack Bot API ÏïåÎ¶º Ï†ÑÏÜ° ÏôÑÎ£å: ${errorInfo.httpMethod} ${errorInfo.requestUri}")
            } else {
                val errorMessage = when (response.error) {
                    "invalid_auth" -> "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Slack Bot ÌÜ†ÌÅ∞ÏûÖÎãàÎã§. ÌÜ†ÌÅ∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî."
                    "channel_not_found" -> "Slack Ï±ÑÎÑêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: $slackChannel"
                    "not_in_channel" -> "BotÏù¥ Ìï¥Îãπ Ï±ÑÎÑêÏóê Ï¥àÎåÄÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§: $slackChannel. /invite @bot-name ÏúºÎ°ú Ï¥àÎåÄÌï¥Ï£ºÏÑ∏Ïöî."
                    "missing_scope" -> "BotÏóê ÌïÑÏöîÌïú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§. chat:write Í∂åÌïúÏùÑ Ï∂îÍ∞ÄÌï¥Ï£ºÏÑ∏Ïöî."
                    else -> response.error
                }
                logger.error("‚ùå Slack Bot API Ïã§Ìå®: $errorMessage")
            }
        } catch (e: Exception) {
            logger.error("‚ùå Slack Bot API ÏóêÎü¨", e)
        }
    }

    /**
     * Bot APIÏö© Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏ Î©îÏãúÏßÄ ÏÉùÏÑ±
     */
    private fun createErrorMessage(errorInfo: ErrorInfo): String {
        val timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
        val errorIcon = when {
            errorInfo.statusCode >= 500 -> "üö®"
            errorInfo.statusCode >= 400 -> "‚ö†Ô∏è"
            else -> "‚ùå"
        }

        return buildString {
            appendLine("$errorIcon **Archive API ÏóêÎü¨ Î∞úÏÉù**")
            appendLine("**ÏãúÍ∞Ñ:** $timestamp")
            appendLine("**ÏÉÅÌÉú ÏΩîÎìú:** ${errorInfo.statusCode}")
            appendLine("**HTTP Î©îÏÑúÎìú:** ${errorInfo.httpMethod}")
            appendLine("**ÏöîÏ≤≠ URI:** ${errorInfo.requestUri}")
            appendLine("**ÏóêÎü¨ Î©îÏãúÏßÄ:** ${errorInfo.errorMessage}")

            errorInfo.remoteAddr?.let {
                appendLine("**ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ IP:** $it")
            }

            // Ï§ëÏöîÌïú ÏóêÎü¨Ïùº Í≤ΩÏö∞ÏóêÎßå ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ìè¨Ìï®
            if (errorInfo.statusCode >= 500) {
                errorInfo.requestBody?.let { body ->
                    if (body.isNotBlank() && body.length < 500) {
                        appendLine("**ÏöîÏ≤≠ Body:** ```${body}```")
                    }
                }

                errorInfo.exception?.let { ex ->
                    val truncatedException = truncateText(ex, 1000)
                    appendLine("**ÏòàÏô∏ Ï†ïÎ≥¥:** ```$truncatedException```")
                }
            }
        }
    }

    /**
     * ÌÖçÏä§Ìä∏Î•º ÏßÄÏ†ïÎêú Í∏∏Ïù¥Î°ú ÏûêÎ•¥Í∏∞
     */
    private fun truncateText(text: String, maxLength: Int): String {
        return if (text.length > maxLength) {
            "${text.take(maxLength)}... (Ï¥ù ${text.length}Ïûê)"
        } else {
            text
        }
    }
}
