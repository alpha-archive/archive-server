name: üöÄ Deploy Archive API to Kubernetes

on:
  push:
    branches: [ main ]
    paths:
      - 'archive-api/**'
      - 'archive-auth/**'
      - 'archive-common/**'
      - 'archive-domain/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
  workflow_dispatch:

env:
  NCP_REGISTRY: archive-cr.kr.ncr.ntruss.com
  IMAGE_NAME: archive-api
  KUBE_NAMESPACE: archive

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: üì¶ Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: üî® Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew :archive-api:build -x test
        
    - name: üîç Get version from build.gradle
      id: version
      run: |
        VERSION=$(grep -E '^version\s*=' build.gradle.kts | sed -E 's/.*"(.+)".*/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "IMAGE_TAG=v$VERSION-${{ github.run_number }}" >> $GITHUB_OUTPUT
        echo "üì¶ Building version: v$VERSION-${{ github.run_number }}"
        
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Login to NCP Container Registry
      run: |
        echo "üîë Logging in to NCP Container Registry..."
        echo "${{ secrets.NCP_SECRET_KEY }}" | docker login ${{ env.NCP_REGISTRY }} \
          --username "${{ secrets.NCP_ACCESS_KEY }}" \
          --password-stdin
        
    - name: üèóÔ∏è Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.NCP_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.IMAGE_TAG }}
          ${{ env.NCP_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: üîß Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: üèóÔ∏è Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        
    - name: üì• Install NCP IAM Authenticator
      run: |
        # Download and install ncp-iam-authenticator from official NCP storage
        curl -o ncp-iam-authenticator https://kr.object.ncloudstorage.com/nks-download/ncp-iam-authenticator/v1.0.5/linux/amd64/ncp-iam-authenticator
        chmod +x ./ncp-iam-authenticator
        sudo mv ./ncp-iam-authenticator /usr/local/bin/
        
        # Verify installation
        ncp-iam-authenticator help
        
    - name: ‚öôÔ∏è Configure kubectl for NCP
      env:
        NCLOUD_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
        NCLOUD_SECRET_KEY: ${{ secrets.NCP_SECRET_KEY }}
        NCLOUD_API_GW: https://ncloud.apigw.ntruss.com
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        kubectl config set-context --current --namespace=${{ env.KUBE_NAMESPACE }}
        
        # Export NCP credentials for authenticator
        export NCLOUD_ACCESS_KEY="${{ secrets.NCP_ACCESS_KEY }}"
        export NCLOUD_SECRET_KEY="${{ secrets.NCP_SECRET_KEY }}"
        export NCLOUD_API_GW="https://ncloud.apigw.ntruss.com"
        
        # Verify connection
        kubectl cluster-info
        
    - name: üöÄ Deploy to Kubernetes
      env:
        NCLOUD_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
        NCLOUD_SECRET_KEY: ${{ secrets.NCP_SECRET_KEY }}
        NCLOUD_API_GW: https://ncloud.apigw.ntruss.com
      run: |
        # Update deployment image
        kubectl set image deployment/archive-api \
          archive-api=${{ env.NCP_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.IMAGE_TAG }} \
          -n ${{ env.KUBE_NAMESPACE }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/archive-api -n ${{ env.KUBE_NAMESPACE }} --timeout=600s
        
        # Verify deployment
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app=archive-api
        
  notification:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì¢ Notify Deployment Result
      if: always()
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "‚úÖ Archive API has been successfully deployed to Kubernetes"
        else
          echo "‚ùå Deployment failed!"
          echo "üîç Please check the logs for details"
        fi
